import { Tetromino } from './Tetromino';
import { Point } from './Point';

/**
 * POSITION: 0 
 * +-----+-----+-----+-----+-----+-----+
 * |     | -2  | -1  |  0  | +1  | +2  |
 * +-----+-----+-----+-----+-----+-----+
 * | -2  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * | -1  |     |     |  x  |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * |  0  |     |     |  x  |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * | +1  |     |  x  |  x  |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * | +2  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 */ 
const J_P0 = [
    new Point(0,-1),
    new Point(0,0),
    new Point(0,1),
    new Point(-1,1),
];

/**
 * POSITION: 1 (Snowwhite)
 * +-----+-----+-----+-----+-----+-----+
 * |     | -2  | -1  |  0  | +1  | +2  |
 * +-----+-----+-----+-----+-----+-----+
 * | -2  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * | -1  |     |  x  |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * |  0  |     |  x  |  x  |  x  |     |
 * +-----+-----+-----+-----+-----+-----+
 * | +1  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * | +2  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 */
const J_P1 = [
    new Point(-1,-1),
    new Point(-1,0),
    new Point(0,0),
    new Point(1,0),
];
/**
 * POSITION: 2
 * +-----+-----+-----+-----+-----+-----+
 * |     | -2  | -1  |  0  | +1  | +2  |
 * +-----+-----+-----+-----+-----+-----+
 * | -2  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * | -1  |     |     |  x  |  x  |     |
 * +-----+-----+-----+-----+-----+-----+
 * |  0  |     |     |  x  |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * | +1  |     |     |  x  |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * | +2  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 */
const J_P2 = [
    new Point(0,1),
    new Point(0,0),
    new Point(0,-1),
    new Point(1,-1),
];
/**
 * POSITION: 3 (Flipped Snowwhite)
 * +-----+-----+-----+-----+-----+-----+
 * |     | -2  | -1  |  0  | +1  | +2  |
 * +-----+-----+-----+-----+-----+-----+
 * | -2  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * | -1  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 * |  0  |     |  x  |  x  |  x  |     |
 * +-----+-----+-----+-----+-----+-----+
 * | +1  |     |     |     |  x  |     |
 * +-----+-----+-----+-----+-----+-----+
 * | +2  |     |     |     |     |     |
 * +-----+-----+-----+-----+-----+-----+
 */
const J_P3 = [
    new Point(-1,0),
    new Point(0,0),
    new Point(1,0),
    new Point(1,1),
];

export class TetrominoJ implements Tetromino {

    private positionsPoints: Point[][] = [J_P0, J_P1, J_P2, J_P3];

    /**
     * Range 0-3
     */
    position: number;

    get points(): Point[] {
        return this.positionsPoints[this.position];
    }

    constructor() {
        this.position = 0;
    }

    /**
     * Ensure position decreases
     * and is always in range 0-3
     */
    rotateLeft(): void {


        const ins = 1;
        
        var l = (ins: number) => {
            return ((((ins) % 4) + 4) == 4)? 0 : (((ins) % 4) >= 0) ? (ins) % 4 : ((ins) % 4) + 4
        }

        this.position = l(this.position - 1);
    }

    /**
     * Ensure position increases
     * and is always in range 0-3
     */
    rotateRight(): void {

        var l = (ins: number) => {
            return ((((ins) % 4) + 4) == 4)? 0 : (((ins) % 4) >= 0) ? (ins) % 4 : ((ins) % 4) + 4
        }

        this.position = l(this.position + 1);
    }
}